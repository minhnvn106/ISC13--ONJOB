{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\GitHub\\\\ISC13--ONJOB\\\\React_FE\\\\src\\\\components\\\\CardTables\\\\InstructorTable.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport PropTypes from \"prop-types\";\nimport instructorService from './../../assets/services/instructorService';\nimport { Button, Modal } from 'react-bootstrap';\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\"; // import Input from './../controls/input';\n\nimport Input from './../../assets/services/input';\nexport default function InstructorTable({\n  color\n}) {\n  const [instructors, setInstructors] = useState([]);\n  const [instructorId, setInstructorId] = useState(0);\n  /* ************************* */\n\n  const loadData = () => {\n    instructorService.getAll().then(res => {\n      setInstructors(res);\n    });\n  }; //B9 Remove Thay componentDidMount thành useEffect mngu\n\n\n  useEffect(() => {\n    loadData();\n  }, [instructors]); //[] Bắt buộc phải có nếu không nó sẽ load lại nhiều lần\n  //Set instructors vào để khi thay đổi update or delete thì nó sẽ set lại giá trị của instructors để nó gọi function loadData()\n\n  const [modalShow, setModalShow] = useState(false);\n\n  const handleModalClose = () => setModalShow(false); //Hàm xử lý để biết xem là thêm mới hay update\n\n\n  const handleModalShow = (e, dataId) => {\n    if (e) e.preventDefault();\n    setInstructorId(dataId);\n\n    if (dataId > 0) {\n      //edit\n      instructorService.get(dataId).then(res => {\n        formik.setValues(res);\n        setModalShow(true);\n      });\n    } else {\n      //add\n      formik.resetForm();\n      setModalShow(true);\n    }\n  };\n  /* ************************* */\n  // Phần III: Formik và Function Xử lý handleFormSubmit \n\n\n  const formik = useFormik({\n    initialValues: {\n      insCode: \"\",\n      insName: \"\",\n      insGender: \"\",\n      insBirthday: \"\",\n      insEmail: \"\",\n      insPhone: \"\",\n      insImg: \"\",\n      insCertification: \"\",\n      insWorkStatus: \"\",\n      insNote: \"\" //Nếu có thêm nhiều trường khác\n\n    },\n    validationSchema: Yup.object({\n      insCode: Yup.string().required(\"Required\").min(4, \"Must be 4 characters or more\"),\n      insName: Yup.string().required(\"Required\"),\n      insEmail: Yup.string().email()\n    }),\n    onSubmit: values => {\n      // console.log(values);\n      //Tách ra một hàm riêng để xử lý form\n      handleFormSubmit(values);\n    }\n  }); //Function xử lý khi người dùng nhập dữ liệu và thêm dữ liệu thành công \n\n  const handleFormSubmit = data => {\n    if (instructorId === 0) {\n      //add\n      instructorService.add(data).then(res => {\n        loadData();\n        handleModalClose();\n      });\n    } else {\n      //update\n      instructorService.update(instructorId, data).then(res => {\n        loadData();\n        handleModalClose(); // if(res.errorCode===0){\n        // }else{\n        // }\n      });\n    }\n  }; //Delete 1 dòng dữ liệu\n\n\n  const deleteRow = (e, dataId) => {\n    e.preventDefault();\n    instructorService.delete(dataId).then(res => {\n      if (res.errorCode === 0) {\n        loadData();\n        console.log(res);\n      } else {}\n    });\n    console.log(dataId);\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded \" + (color === \"light\" ? \"bg-white\" : \"bg-blue-900 text-white\")\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"rounded-t mb-0 px-4 py-3 border-0\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-wrap items-center\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"relative w-full px-4 max-w-full flex-grow flex-1\"\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"font-semibold text-lg \" + (color === \"light\" ? \"text-gray-800\" : \"text-white\")\n  }, \" DANH S\\xC1CH GI\\u1EA2NG VI\\xCAN\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-auto\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-toggle\": \"modal\",\n    \"data-target\": \"#editModal\",\n    variant: \"primary\",\n    onClick: () => handleModalShow(null, 0)\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-plus\"\n  }), \"Th\\xEAm\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"block w-full overflow-x-auto\"\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"items-center w-full bg-transparent border-collapse\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", null, /*#__PURE__*/React.createElement(\"th\", null, \"STT\"), /*#__PURE__*/React.createElement(\"th\", null, \"M\\xE3 Gi\\xE1o Vi\\xEAn\"), /*#__PURE__*/React.createElement(\"th\", null, \"T\\xEAn GV\"), /*#__PURE__*/React.createElement(\"th\", null, \"Gi\\u1EDBi T\\xEDnh\"), /*#__PURE__*/React.createElement(\"th\", null, \"Ng\\xE0y Sinh\"), /*#__PURE__*/React.createElement(\"th\", null, \"Email\"), /*#__PURE__*/React.createElement(\"th\", null, \"SDT\"), /*#__PURE__*/React.createElement(\"th\", null, \"H\\xECnh \\u1EA2nh\"), /*#__PURE__*/React.createElement(\"th\", null, \"Ch\\u1EE9ng Ch\\u1EC9\"), /*#__PURE__*/React.createElement(\"th\", null, \"Tr\\u1EA1ng Th\\xE1i\"), /*#__PURE__*/React.createElement(\"th\", null, \"Active\"))), /*#__PURE__*/React.createElement(\"tbody\", null, instructors.map((instructor, idx) => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: instructor.insId\n    }, /*#__PURE__*/React.createElement(\"th\", null, idx + 1), /*#__PURE__*/React.createElement(\"td\", null, instructor.insCode), /*#__PURE__*/React.createElement(\"td\", null, instructor.insName), /*#__PURE__*/React.createElement(\"td\", null, instructor.insGender), /*#__PURE__*/React.createElement(\"td\", null, instructor.insBirthday), /*#__PURE__*/React.createElement(\"td\", null, instructor.insEmail), /*#__PURE__*/React.createElement(\"td\", null, instructor.insPhone), /*#__PURE__*/React.createElement(\"td\", null, instructor.insImg), /*#__PURE__*/React.createElement(\"td\", null, instructor.insWorkStatus), /*#__PURE__*/React.createElement(\"td\", null, instructor.insCertification), /*#__PURE__*/React.createElement(\"td\", null, instructor.insNote), /*#__PURE__*/React.createElement(\"td\", null, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/#\",\n      onClick: e => handleModalShow(e, instructor.insId)\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-edit text-primary\"\n    })), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/#\",\n      onClick: e => deleteRow(e, instructor.insId)\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fas fa-trash-alt text-danger\"\n    }))));\n  })))), /*#__PURE__*/React.createElement(Modal, {\n    show: modalShow,\n    onHide: handleModalClose,\n    backdrop: \"static\",\n    keyboard: false\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true\n  }, /*#__PURE__*/React.createElement(Modal.Title, null, \"Instructor\")), /*#__PURE__*/React.createElement(\"form\", {\n    autoComplete: \"on\",\n    onSubmit: formik.handleSubmit\n  }, /*#__PURE__*/React.createElement(Modal.Body, null, /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInstructor\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Instructor Code\",\n    labelSize: \"4\",\n    maxLength: \"50\",\n    frmField: formik.getFieldProps(\"insCode\"),\n    err: formik.touched.insCode && formik.errors.insCode,\n    errMessage: formik.errors.insCode\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInstructor\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Instructor Name\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insName\"),\n    err: formik.touched.insName && formik.errors.insName,\n    errMessage: formik.errors.insName\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsGender\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Gender\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insGender\"),\n    err: formik.touched.insGender && formik.errors.insGender,\n    errMessage: formik.errors.insGender\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsBirthday\",\n    type: \"date\",\n    pattern: \"\\\\d{4}-\\\\d{2}-\\\\d{2}\",\n    className: \"inputClass form-control\",\n    label: \"BirthDay\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insBirthday\"),\n    err: formik.touched.insBirthday && formik.errors.insBirthday,\n    errMessage: formik.errors.insBirthday\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsEmail\",\n    type: \"email\",\n    className: \"inputClass form-control\",\n    label: \"Email\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insEmail\"),\n    err: formik.touched.insEmail && formik.errors.insEmail,\n    errMessage: formik.errors.insEmail\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsPhone\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Phone\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insPhone\"),\n    err: formik.touched.insPhone && formik.errors.insPhone,\n    errMessage: formik.errors.insPhone\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsImg\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Image\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insImg\"),\n    err: formik.touched.insImg && formik.errors.insImg,\n    errMessage: formik.errors.insImg\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsCertification\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Certification\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insCertification\"),\n    err: formik.touched.insCertification && formik.errors.insCertification,\n    errMessage: formik.errors.insCertification\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsWorkStatus\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Work Status\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insWorkStatus\"),\n    err: formik.touched.insWorkStatus && formik.errors.insWorkStatus,\n    errMessage: formik.errors.insWorkStatus\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"txtInsNote\",\n    type: \"text\",\n    className: \"inputClass form-control\",\n    label: \"Note\",\n    labelSize: \"4\",\n    maxLength: \"100\",\n    frmField: formik.getFieldProps(\"insNote\"),\n    err: formik.touched.insNote && formik.errors.insNote,\n    errMessage: formik.errors.insNote\n  })), /*#__PURE__*/React.createElement(Modal.Footer, null, /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    onClick: handleModalClose\n  }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    onClick: handleModalClose,\n    disabled: !formik.isValid && formik.dirty\n  }, \"Save Changes\")))))))));\n}\nInstructorTable.defaultProps = {\n  color: \"light\"\n};\nInstructorTable.propTypes = {\n  color: PropTypes.oneOf([\"light\", \"dark\"])\n};","map":{"version":3,"sources":["C:/Users/Admin/Documents/GitHub/ISC13--ONJOB/React_FE/src/components/CardTables/InstructorTable.js"],"names":["React","useState","useEffect","Fragment","PropTypes","instructorService","Button","Modal","useFormik","Yup","Input","InstructorTable","color","instructors","setInstructors","instructorId","setInstructorId","loadData","getAll","then","res","modalShow","setModalShow","handleModalClose","handleModalShow","e","dataId","preventDefault","get","formik","setValues","resetForm","initialValues","insCode","insName","insGender","insBirthday","insEmail","insPhone","insImg","insCertification","insWorkStatus","insNote","validationSchema","object","string","required","min","email","onSubmit","values","handleFormSubmit","data","add","update","deleteRow","delete","errorCode","console","log","map","instructor","idx","insId","handleSubmit","getFieldProps","touched","errors","isValid","dirty","defaultProps","propTypes","oneOf"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,2CAA9B;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,iBAA9B;AAEA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AAEA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,eAAe,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAoC;AACjD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,CAAD,CAAhD;AAEE;;AACF,QAAMgB,QAAQ,GAAG,MAAM;AACjBZ,IAAAA,iBAAiB,CAACa,MAAlB,GAA2BC,IAA3B,CAAgCC,GAAG,IAAI;AACnCN,MAAAA,cAAc,CAACM,GAAD,CAAd;AACH,KAFD;AAGH,GAJH,CANiD,CAW/C;;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AAEZe,IAAAA,QAAQ;AAEX,GAJQ,EAIN,CAACJ,WAAD,CAJM,CAAT,CAZ+C,CAgB5B;AACnB;;AAGA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMsB,gBAAgB,GAAG,MAAMD,YAAY,CAAC,KAAD,CAA3C,CAtB+C,CAwB/C;;;AACA,QAAME,eAAe,GAAG,CAACC,CAAD,EAAIC,MAAJ,KAAe;AACnC,QAAID,CAAJ,EAAOA,CAAC,CAACE,cAAF;AAEPX,IAAAA,eAAe,CAACU,MAAD,CAAf;;AACA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AAAC;AACbrB,MAAAA,iBAAiB,CAACuB,GAAlB,CAAsBF,MAAtB,EAA8BP,IAA9B,CAAmCC,GAAG,IAAI;AACtCS,QAAAA,MAAM,CAACC,SAAP,CAAiBV,GAAjB;AACAE,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,OAHD;AAIH,KALD,MAKO;AAAC;AACJO,MAAAA,MAAM,CAACE,SAAP;AACAT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AACJ,GAbD;AAcA;AACA;;;AACA,QAAMO,MAAM,GAAGrB,SAAS,CAAC;AACrBwB,IAAAA,aAAa,EAAE;AACXC,MAAAA,OAAO,EAAE,EADE;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,SAAS,EAAE,EAHA;AAIXC,MAAAA,WAAW,EAAE,EAJF;AAKXC,MAAAA,QAAQ,EAAE,EALC;AAMXC,MAAAA,QAAQ,EAAE,EANC;AAOXC,MAAAA,MAAM,EAAE,EAPG;AAQXC,MAAAA,gBAAgB,EAAE,EARP;AASXC,MAAAA,aAAa,EAAE,EATJ;AAUXC,MAAAA,OAAO,EAAE,EAVE,CAWX;;AAXW,KADM;AAcrBC,IAAAA,gBAAgB,EAAElC,GAAG,CAACmC,MAAJ,CAAW;AACzBX,MAAAA,OAAO,EAAExB,GAAG,CAACoC,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,EAAkCC,GAAlC,CAAsC,CAAtC,EAAyC,8BAAzC,CADgB;AAEzBb,MAAAA,OAAO,EAAEzB,GAAG,CAACoC,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAFgB;AAGzBT,MAAAA,QAAQ,EAAE5B,GAAG,CAACoC,MAAJ,GAAaG,KAAb;AAHe,KAAX,CAdG;AAmBrBC,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AAClB;AACA;AACAC,MAAAA,gBAAgB,CAACD,MAAD,CAAhB;AACH;AAvBoB,GAAD,CAAxB,CAzC+C,CAmE/C;;AACA,QAAMC,gBAAgB,GAAIC,IAAD,IAAU;AAE/B,QAAIrC,YAAY,KAAK,CAArB,EAAwB;AAAC;AACrBV,MAAAA,iBAAiB,CAACgD,GAAlB,CAAsBD,IAAtB,EAA4BjC,IAA5B,CAAkCC,GAAD,IAAS;AACtCH,QAAAA,QAAQ;AACRM,QAAAA,gBAAgB;AACnB,OAHD;AAIH,KALD,MAKO;AAAC;AACJlB,MAAAA,iBAAiB,CAACiD,MAAlB,CAAyBvC,YAAzB,EAAuCqC,IAAvC,EAA6CjC,IAA7C,CAAkDC,GAAG,IAAI;AACrDH,QAAAA,QAAQ;AACRM,QAAAA,gBAAgB,GAFqC,CAGrD;AAEA;AAEA;AACH,OARD;AASH;AACJ,GAlBD,CApE+C,CAyF/C;;;AACA,QAAMgC,SAAS,GAAG,CAAC9B,CAAD,EAAIC,MAAJ,KAAe;AAC7BD,IAAAA,CAAC,CAACE,cAAF;AACAtB,IAAAA,iBAAiB,CAACmD,MAAlB,CAAyB9B,MAAzB,EAAiCP,IAAjC,CAAsCC,GAAG,IAAI;AACzC,UAAIA,GAAG,CAACqC,SAAJ,KAAkB,CAAtB,EAAyB;AACrBxC,QAAAA,QAAQ;AACRyC,QAAAA,OAAO,CAACC,GAAR,CAAYvC,GAAZ;AAEH,OAJD,MAIO,CAEN;AACJ,KARD;AASAsC,IAAAA,OAAO,CAACC,GAAR,CAAYjC,MAAZ;AACH,GAZD;;AAcF,sBACE,oBAAC,QAAD,qBAEE;AACE,IAAA,SAAS,EACP,+EACCd,KAAK,KAAK,OAAV,GAAoB,UAApB,GAAiC,wBADlC;AAFJ,kBAME;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE;AAAI,IAAA,SAAS,EAAE,4BAA4BA,KAAK,KAAK,OAAV,GAAoB,eAApB,GAAsC,YAAlE;AAAf,wCADF,CADF,eAKE;AAAK,IAAA,SAAS,EAAC;AAAf,kBAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,iBAAhC;AACA,mBAAY,OADZ;AACoB,mBAAY,YADhC;AAC6C,IAAA,OAAO,EAAC,SADrD;AAEA,IAAA,OAAO,EAAE,MACTY,eAAe,CAAC,IAAD,EAAO,CAAP;AAHf,kBAIE;AAAG,IAAA,SAAS,EAAC;AAAb,IAJF,YAHJ,eAaI;AAAK,IAAA,SAAS,EAAC;AAAf,kBACI;AAAO,IAAA,SAAS,EAAC;AAAjB,kBACE,gDACE,6CACE,sCADF,eAEE,wDAFF,eAGE,4CAHF,eAIE,oDAJF,eAKE,+CALF,eAME,wCANF,eAOE,sCAPF,eAQE,mDARF,eASE,sDATF,eAUE,qDAVF,eAWE,yCAXF,CADF,CADF,eAgBE,mCAEEX,WAAW,CAAC+C,GAAZ,CAAgB,CAACC,UAAD,EAAaC,GAAb,KAAqB;AACjC,wBACI;AAAI,MAAA,GAAG,EAAED,UAAU,CAACE;AAApB,oBACI,gCAAKD,GAAG,GAAG,CAAX,CADJ,eAEI,gCAAKD,UAAU,CAAC5B,OAAhB,CAFJ,eAGI,gCAAK4B,UAAU,CAAC3B,OAAhB,CAHJ,eAII,gCAAK2B,UAAU,CAAC1B,SAAhB,CAJJ,eAKI,gCAAM0B,UAAU,CAACzB,WAAjB,CALJ,eAMI,gCAAKyB,UAAU,CAACxB,QAAhB,CANJ,eAOI,gCAAKwB,UAAU,CAACvB,QAAhB,CAPJ,eAQI,gCAAKuB,UAAU,CAACtB,MAAhB,CARJ,eASI,gCAAKsB,UAAU,CAACpB,aAAhB,CATJ,eAUI,gCAAKoB,UAAU,CAACrB,gBAAhB,CAVJ,eAWI,gCAAKqB,UAAU,CAACnB,OAAhB,CAXJ,eAYI,6CACI;AAAG,MAAA,IAAI,EAAC,IAAR;AAAa,MAAA,OAAO,EAAGjB,CAAD,IAAOD,eAAe,CAACC,CAAD,EAAIoC,UAAU,CAACE,KAAf;AAA5C,oBAAmE;AAAG,MAAA,SAAS,EAAC;AAAb,MAAnE,CADJ,eAEI;AAAG,MAAA,IAAI,EAAC,IAAR;AAAa,MAAA,OAAO,EAAGtC,CAAD,IAAO8B,SAAS,CAAC9B,CAAD,EAAIoC,UAAU,CAACE,KAAf;AAAtC,oBAA6D;AAAG,MAAA,SAAS,EAAC;AAAb,MAA7D,CAFJ,CAZJ,CADJ;AAmBP,GApBG,CAFF,CAhBF,CADJ,CAbJ,eA2DI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAE1C,SAAb;AAAwB,IAAA,MAAM,EAAEE,gBAAhC;AAAkD,IAAA,QAAQ,EAAC,QAA3D;AAAoE,IAAA,QAAQ,EAAE;AAA9E,kBACI,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW;AAAzB,kBACI,oBAAC,KAAD,CAAO,KAAP,qBADJ,CADJ,eAII;AAAM,IAAA,YAAY,EAAC,IAAnB;AAAwB,IAAA,QAAQ,EAAEM,MAAM,CAACmC;AAAzC,kBACI,oBAAC,KAAD,CAAO,IAAP,qBAEI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,eAAV;AAA0B,IAAA,IAAI,EAAC,MAA/B;AAAsC,IAAA,SAAS,EAAC,yBAAhD;AAA0E,IAAA,KAAK,EAAC,iBAAhF;AAAkG,IAAA,SAAS,EAAC,GAA5G;AAAgH,IAAA,SAAS,EAAC,IAA1H;AACI,IAAA,QAAQ,EAAEnC,MAAM,CAACoC,aAAP,CAAqB,SAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAejC,OAAf,IAA0BJ,MAAM,CAACsC,MAAP,CAAclC,OAFjD;AAGI,IAAA,UAAU,EAAEJ,MAAM,CAACsC,MAAP,CAAclC;AAH9B,IAFJ,eAQI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,eAAV;AAA0B,IAAA,IAAI,EAAC,MAA/B;AAAsC,IAAA,SAAS,EAAC,yBAAhD;AAA0E,IAAA,KAAK,EAAC,iBAAhF;AAAkG,IAAA,SAAS,EAAC,GAA5G;AAAgH,IAAA,SAAS,EAAC,KAA1H;AACI,IAAA,QAAQ,EAAEJ,MAAM,CAACoC,aAAP,CAAqB,SAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAehC,OAAf,IAA0BL,MAAM,CAACsC,MAAP,CAAcjC,OAFjD;AAGI,IAAA,UAAU,EAAEL,MAAM,CAACsC,MAAP,CAAcjC;AAH9B,IARJ,eAcI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,cAAV;AAAyB,IAAA,IAAI,EAAC,MAA9B;AAAqC,IAAA,SAAS,EAAC,yBAA/C;AAAyE,IAAA,KAAK,EAAC,QAA/E;AAAwF,IAAA,SAAS,EAAC,GAAlG;AAAsG,IAAA,SAAS,EAAC,KAAhH;AACI,IAAA,QAAQ,EAAEL,MAAM,CAACoC,aAAP,CAAqB,WAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAe/B,SAAf,IAA4BN,MAAM,CAACsC,MAAP,CAAchC,SAFnD;AAGI,IAAA,UAAU,EAAEN,MAAM,CAACsC,MAAP,CAAchC;AAH9B,IAdJ,eAqBI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,gBAAV;AAA2B,IAAA,IAAI,EAAC,MAAhC;AAAuC,IAAA,OAAO,EAAC,sBAA/C;AAAmE,IAAA,SAAS,EAAC,yBAA7E;AAAuG,IAAA,KAAK,EAAC,UAA7G;AAAwH,IAAA,SAAS,EAAC,GAAlI;AAAsI,IAAA,SAAS,EAAC,KAAhJ;AACI,IAAA,QAAQ,EAAEN,MAAM,CAACoC,aAAP,CAAqB,aAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAe9B,WAAf,IAA8BP,MAAM,CAACsC,MAAP,CAAc/B,WAFrD;AAGI,IAAA,UAAU,EAAEP,MAAM,CAACsC,MAAP,CAAc/B;AAH9B,IArBJ,eA2BI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,aAAV;AAAwB,IAAA,IAAI,EAAC,OAA7B;AAAqC,IAAA,SAAS,EAAC,yBAA/C;AAAyE,IAAA,KAAK,EAAC,OAA/E;AAAuF,IAAA,SAAS,EAAC,GAAjG;AAAqG,IAAA,SAAS,EAAC,KAA/G;AACI,IAAA,QAAQ,EAAEP,MAAM,CAACoC,aAAP,CAAqB,UAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAe7B,QAAf,IAA2BR,MAAM,CAACsC,MAAP,CAAc9B,QAFlD;AAGI,IAAA,UAAU,EAAER,MAAM,CAACsC,MAAP,CAAc9B;AAH9B,IA3BJ,eAiCI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,aAAV;AAAwB,IAAA,IAAI,EAAC,MAA7B;AAAoC,IAAA,SAAS,EAAC,yBAA9C;AAAwE,IAAA,KAAK,EAAC,OAA9E;AAAsF,IAAA,SAAS,EAAC,GAAhG;AAAoG,IAAA,SAAS,EAAC,KAA9G;AACI,IAAA,QAAQ,EAAER,MAAM,CAACoC,aAAP,CAAqB,UAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAe5B,QAAf,IAA2BT,MAAM,CAACsC,MAAP,CAAc7B,QAFlD;AAGI,IAAA,UAAU,EAAET,MAAM,CAACsC,MAAP,CAAc7B;AAH9B,IAjCJ,eAuCI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,WAAV;AAAsB,IAAA,IAAI,EAAC,MAA3B;AAAkC,IAAA,SAAS,EAAC,yBAA5C;AAAsE,IAAA,KAAK,EAAC,OAA5E;AAAoF,IAAA,SAAS,EAAC,GAA9F;AAAkG,IAAA,SAAS,EAAC,KAA5G;AACI,IAAA,QAAQ,EAAET,MAAM,CAACoC,aAAP,CAAqB,QAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAe3B,MAAf,IAAyBV,MAAM,CAACsC,MAAP,CAAc5B,MAFhD;AAGI,IAAA,UAAU,EAAEV,MAAM,CAACsC,MAAP,CAAc5B;AAH9B,IAvCJ,eA6CI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,qBAAV;AAAgC,IAAA,IAAI,EAAC,MAArC;AAA4C,IAAA,SAAS,EAAC,yBAAtD;AAAgF,IAAA,KAAK,EAAC,eAAtF;AAAsG,IAAA,SAAS,EAAC,GAAhH;AAAoH,IAAA,SAAS,EAAC,KAA9H;AACI,IAAA,QAAQ,EAAEV,MAAM,CAACoC,aAAP,CAAqB,kBAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAe1B,gBAAf,IAAmCX,MAAM,CAACsC,MAAP,CAAc3B,gBAF1D;AAGI,IAAA,UAAU,EAAEX,MAAM,CAACsC,MAAP,CAAc3B;AAH9B,IA7CJ,eAmDI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,kBAAV;AAA6B,IAAA,IAAI,EAAC,MAAlC;AAAyC,IAAA,SAAS,EAAC,yBAAnD;AAA6E,IAAA,KAAK,EAAC,aAAnF;AAAiG,IAAA,SAAS,EAAC,GAA3G;AAA+G,IAAA,SAAS,EAAC,KAAzH;AACI,IAAA,QAAQ,EAAEX,MAAM,CAACoC,aAAP,CAAqB,eAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAezB,aAAf,IAAgCZ,MAAM,CAACsC,MAAP,CAAc1B,aAFvD;AAGI,IAAA,UAAU,EAAEZ,MAAM,CAACsC,MAAP,CAAc1B;AAH9B,IAnDJ,eAyDI,oBAAC,KAAD;AAAO,IAAA,EAAE,EAAC,YAAV;AAAuB,IAAA,IAAI,EAAC,MAA5B;AAAmC,IAAA,SAAS,EAAC,yBAA7C;AAAuE,IAAA,KAAK,EAAC,MAA7E;AAAoF,IAAA,SAAS,EAAC,GAA9F;AAAkG,IAAA,SAAS,EAAC,KAA5G;AACI,IAAA,QAAQ,EAAEZ,MAAM,CAACoC,aAAP,CAAqB,SAArB,CADd;AAEI,IAAA,GAAG,EAAEpC,MAAM,CAACqC,OAAP,CAAexB,OAAf,IAA0Bb,MAAM,CAACsC,MAAP,CAAczB,OAFjD;AAGI,IAAA,UAAU,EAAEb,MAAM,CAACsC,MAAP,CAAczB;AAH9B,IAzDJ,CADJ,eAkEI,oBAAC,KAAD,CAAO,MAAP,qBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,WAAhB;AAA4B,IAAA,OAAO,EAAEnB;AAArC,aADJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,IAAI,EAAC,QAA/B;AAAwC,IAAA,OAAO,EAAEA,gBAAjD;AAAmE,IAAA,QAAQ,EAAG,CAACM,MAAM,CAACuC,OAAR,IAAmBvC,MAAM,CAACwC;AAAxG,oBALJ,CAlEJ,CAJJ,CA3DJ,CALF,CADF,CANF,CAFF,CADF;AAsKD;AAED1D,eAAe,CAAC2D,YAAhB,GAA+B;AAC7B1D,EAAAA,KAAK,EAAE;AADsB,CAA/B;AAIAD,eAAe,CAAC4D,SAAhB,GAA4B;AAC1B3D,EAAAA,KAAK,EAAER,SAAS,CAACoE,KAAV,CAAgB,CAAC,OAAD,EAAU,MAAV,CAAhB;AADmB,CAA5B","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport instructorService from './../../assets/services/instructorService';\r\nimport { Button, Modal } from 'react-bootstrap';\r\n\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from \"yup\";\r\n// import Input from './../controls/input';\r\n\r\nimport Input from './../../assets/services/input';\r\n\r\nexport default function InstructorTable({ color }) {\r\n  const [instructors, setInstructors] = useState([]);\r\n\r\n  const [instructorId, setInstructorId] = useState(0);\r\n\r\n    /* ************************* */\r\n  const loadData = () => {\r\n        instructorService.getAll().then(res => {\r\n            setInstructors(res);\r\n        })\r\n    }\r\n    //B9 Remove Thay componentDidMount thành useEffect mngu\r\n    useEffect(() => {\r\n        \r\n        loadData();\r\n       \r\n    }, [instructors]); //[] Bắt buộc phải có nếu không nó sẽ load lại nhiều lần\r\n    //Set instructors vào để khi thay đổi update or delete thì nó sẽ set lại giá trị của instructors để nó gọi function loadData()\r\n\r\n\r\n    const [modalShow, setModalShow] = useState(false);\r\n\r\n    const handleModalClose = () => setModalShow(false);\r\n\r\n    //Hàm xử lý để biết xem là thêm mới hay update\r\n    const handleModalShow = (e, dataId) => {\r\n        if (e) e.preventDefault();\r\n\r\n        setInstructorId(dataId);\r\n        if (dataId > 0) {//edit\r\n            instructorService.get(dataId).then(res => {\r\n                formik.setValues(res);\r\n                setModalShow(true);\r\n            })\r\n        } else {//add\r\n            formik.resetForm();\r\n            setModalShow(true);\r\n        }\r\n    }\r\n    /* ************************* */\r\n    // Phần III: Formik và Function Xử lý handleFormSubmit \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            insCode: \"\",\r\n            insName: \"\",\r\n            insGender: \"\",\r\n            insBirthday: \"\",\r\n            insEmail: \"\",\r\n            insPhone: \"\",\r\n            insImg: \"\",\r\n            insCertification: \"\",\r\n            insWorkStatus: \"\",\r\n            insNote: \"\"\r\n            //Nếu có thêm nhiều trường khác\r\n        },\r\n        validationSchema: Yup.object({\r\n            insCode: Yup.string().required(\"Required\").min(4, \"Must be 4 characters or more\"),\r\n            insName: Yup.string().required(\"Required\"),\r\n            insEmail: Yup.string().email(),\r\n        }),\r\n        onSubmit: (values) => {\r\n            // console.log(values);\r\n            //Tách ra một hàm riêng để xử lý form\r\n            handleFormSubmit(values);\r\n        }\r\n    });\r\n\r\n    //Function xử lý khi người dùng nhập dữ liệu và thêm dữ liệu thành công \r\n    const handleFormSubmit = (data) => {\r\n\r\n        if (instructorId === 0) {//add\r\n            instructorService.add(data).then((res) => {\r\n                loadData();\r\n                handleModalClose();\r\n            })\r\n        } else {//update\r\n            instructorService.update(instructorId, data).then(res => {\r\n                loadData()\r\n                handleModalClose();\r\n                // if(res.errorCode===0){\r\n\r\n                // }else{\r\n\r\n                // }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    //Delete 1 dòng dữ liệu\r\n    const deleteRow = (e, dataId) => {\r\n        e.preventDefault();\r\n        instructorService.delete(dataId).then(res => {\r\n            if (res.errorCode === 0) {\r\n                loadData();\r\n                console.log(res);\r\n\r\n            } else {\r\n\r\n            }\r\n        });\r\n        console.log(dataId);\r\n    }\r\n  \r\n  return (\r\n    <Fragment>\r\n        {/* Colors */}\r\n      <div\r\n        className={\r\n          \"relative flex flex-col min-w-0 break-words w-full mb-6 shadow-lg rounded \" +\r\n          (color === \"light\" ? \"bg-white\" : \"bg-blue-900 text-white\")\r\n        }\r\n      >\r\n        <div className=\"rounded-t mb-0 px-4 py-3 border-0\">\r\n          <div className=\"flex flex-wrap items-center\">\r\n            <div className=\"relative w-full px-4 max-w-full flex-grow flex-1\">\r\n              <h3 className={\"font-semibold text-lg \" + (color === \"light\" ? \"text-gray-800\" : \"text-white\")}> DANH SÁCH GIẢNG VIÊN</h3>\r\n            </div>\r\n            \r\n            <div className=\"col-auto\">\r\n                \r\n                {/* Button Thêm */}\r\n                <button type=\"button\" className=\"btn btn-primary\" \r\n                data-toggle=\"modal\" data-target=\"#editModal\" variant=\"primary\" \r\n                onClick={() => \r\n                handleModalShow(null, 0)}>\r\n                  <i className=\"fas fa-plus\"></i> \r\n                  Thêm\r\n                </button>\r\n\r\n\r\n                {/*Start Table */}\r\n                <div className=\"block w-full overflow-x-auto\">\r\n                    <table className=\"items-center w-full bg-transparent border-collapse\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>STT</th>\r\n                          <th>Mã Giáo Viên</th>\r\n                          <th>Tên GV</th>\r\n                          <th>Giới Tính</th>\r\n                          <th>Ngày Sinh</th>\r\n                          <th>Email</th>\r\n                          <th>SDT</th>\r\n                          <th>Hình Ảnh</th>\r\n                          <th>Chứng Chỉ</th>\r\n                          <th>Trạng Thái</th>\r\n                          <th>Active</th>  \r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                      {\r\n                        instructors.map((instructor, idx) => {\r\n                            return (\r\n                                <tr key={instructor.insId}>\r\n                                    <th>{idx + 1}</th>\r\n                                    <td>{instructor.insCode}</td>\r\n                                    <td>{instructor.insName}</td>\r\n                                    <td>{instructor.insGender}</td>\r\n                                    <td >{instructor.insBirthday}</td>\r\n                                    <td>{instructor.insEmail}</td>\r\n                                    <td>{instructor.insPhone}</td>\r\n                                    <td>{instructor.insImg}</td>\r\n                                    <td>{instructor.insWorkStatus}</td>\r\n                                    <td>{instructor.insCertification}</td>\r\n                                    <td>{instructor.insNote}</td>\r\n                                    <td>\r\n                                        <a href=\"/#\" onClick={(e) => handleModalShow(e, instructor.insId)}><i className=\"fas fa-edit text-primary\"></i></a>\r\n                                        <a href=\"/#\" onClick={(e) => deleteRow(e, instructor.insId)}><i className=\"fas fa-trash-alt text-danger\"></i></a>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                    })}          \r\n                    </tbody>\r\n                  </table>          \r\n                </div>\r\n                {/* End Table */}\r\n\r\n                {/* Start Modal */}\r\n                <Modal show={modalShow} onHide={handleModalClose} backdrop=\"static\" keyboard={false}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Instructor</Modal.Title>\r\n                    </Modal.Header>\r\n                    <form autoComplete=\"on\" onSubmit={formik.handleSubmit}>\r\n                        <Modal.Body>\r\n                            {/* insCode */}\r\n                            <Input id=\"txtInstructor\" type=\"text\" className=\"inputClass form-control\" label=\"Instructor Code\" labelSize=\"4\" maxLength=\"50\"\r\n                                frmField={formik.getFieldProps(\"insCode\")}\r\n                                err={formik.touched.insCode && formik.errors.insCode}\r\n                                errMessage={formik.errors.insCode}\r\n                            />\r\n                            {/* insName */}\r\n                            <Input id=\"txtInstructor\" type=\"text\" className=\"inputClass form-control\" label=\"Instructor Name\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insName\")}\r\n                                err={formik.touched.insName && formik.errors.insName}\r\n                                errMessage={formik.errors.insName}\r\n                            />\r\n                            {/* insGender */}\r\n                            <Input id=\"txtInsGender\" type=\"text\" className=\"inputClass form-control\" label=\"Gender\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insGender\")}\r\n                                err={formik.touched.insGender && formik.errors.insGender}\r\n                                errMessage={formik.errors.insGender}\r\n                            />\r\n                            \r\n                            {/* insBirthday */}\r\n                            <Input id=\"txtInsBirthday\" type=\"date\" pattern=\"\\d{4}-\\d{2}-\\d{2}\" className=\"inputClass form-control\" label=\"BirthDay\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insBirthday\")}\r\n                                err={formik.touched.insBirthday && formik.errors.insBirthday}\r\n                                errMessage={formik.errors.insBirthday}\r\n                            />\r\n                            {/* insEmail */}\r\n                            <Input id=\"txtInsEmail\" type=\"email\" className=\"inputClass form-control\" label=\"Email\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insEmail\")}\r\n                                err={formik.touched.insEmail && formik.errors.insEmail}\r\n                                errMessage={formik.errors.insEmail}\r\n                            />\r\n                            {/* insPhone */}\r\n                            <Input id=\"txtInsPhone\" type=\"text\" className=\"inputClass form-control\" label=\"Phone\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insPhone\")}\r\n                                err={formik.touched.insPhone && formik.errors.insPhone}\r\n                                errMessage={formik.errors.insPhone}\r\n                            />\r\n                            {/* insImg */}\r\n                            <Input id=\"txtInsImg\" type=\"text\" className=\"inputClass form-control\" label=\"Image\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insImg\")}\r\n                                err={formik.touched.insImg && formik.errors.insImg}\r\n                                errMessage={formik.errors.insImg}\r\n                            />\r\n                            {/* insCertification */}\r\n                            <Input id=\"txtInsCertification\" type=\"text\" className=\"inputClass form-control\" label=\"Certification\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insCertification\")}\r\n                                err={formik.touched.insCertification && formik.errors.insCertification}\r\n                                errMessage={formik.errors.insCertification}\r\n                            />\r\n                            {/* insWorkStatus */}\r\n                            <Input id=\"txtInsWorkStatus\" type=\"text\" className=\"inputClass form-control\" label=\"Work Status\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insWorkStatus\")}\r\n                                err={formik.touched.insWorkStatus && formik.errors.insWorkStatus}\r\n                                errMessage={formik.errors.insWorkStatus}\r\n                            />\r\n                            {/* insNote */}\r\n                            <Input id=\"txtInsNote\" type=\"text\" className=\"inputClass form-control\" label=\"Note\" labelSize=\"4\" maxLength=\"100\"\r\n                                frmField={formik.getFieldProps(\"insNote\")}\r\n                                err={formik.touched.insNote && formik.errors.insNote}\r\n                                errMessage={formik.errors.insNote}\r\n                            />\r\n\r\n                        </Modal.Body>\r\n\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                                Close\r\n                            </Button>\r\n                            {/*  */}\r\n                            <Button variant=\"primary\" type=\"submit\" onClick={handleModalClose} disabled={(!formik.isValid && formik.dirty)}>\r\n                                Save Changes\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </form>\r\n                </Modal>\r\n                {/* End Modal */}\r\n            </div>\r\n          \r\n          </div>\r\n        </div>\r\n        \r\n        \r\n      </div>\r\n      \r\n    </Fragment>\r\n  );\r\n}\r\n\r\nInstructorTable.defaultProps = {\r\n  color: \"light\",\r\n};\r\n\r\nInstructorTable.propTypes = {\r\n  color: PropTypes.oneOf([\"light\", \"dark\"]),\r\n};\r\n"]},"metadata":{},"sourceType":"module"}